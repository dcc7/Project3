[{"/Users/danielchoe/Projects/project3/src/index.js":"1","/Users/danielchoe/Projects/project3/src/App.js":"2","/Users/danielchoe/Projects/project3/src/app/store.js":"3","/Users/danielchoe/Projects/project3/src/services/cryptoApi.js":"4","/Users/danielchoe/Projects/project3/src/services/cryptoNewsApi.js":"5","/Users/danielchoe/Projects/project3/src/components/index.js":"6","/Users/danielchoe/Projects/project3/src/components/Exchanges.jsx":"7","/Users/danielchoe/Projects/project3/src/components/Homepage.jsx":"8","/Users/danielchoe/Projects/project3/src/components/Cryptocurrencies.jsx":"9","/Users/danielchoe/Projects/project3/src/components/CryptoDetails.jsx":"10","/Users/danielchoe/Projects/project3/src/components/Navbar.jsx":"11","/Users/danielchoe/Projects/project3/src/components/News.jsx":"12","/Users/danielchoe/Projects/project3/src/components/LineChart.jsx":"13","/Users/danielchoe/Projects/project3/src/components/Loader.jsx":"14"},{"size":384,"mtime":1638744370983,"results":"15","hashOfConfig":"16"},{"size":1504,"mtime":1638507714359,"results":"17","hashOfConfig":"16"},{"size":321,"mtime":1638751105822,"results":"18","hashOfConfig":"16"},{"size":1116,"mtime":1639010619314,"results":"19","hashOfConfig":"16"},{"size":806,"mtime":1639010621741,"results":"20","hashOfConfig":"16"},{"size":316,"mtime":1638506701566,"results":"21","hashOfConfig":"16"},{"size":1703,"mtime":1638843101953,"results":"22","hashOfConfig":"16"},{"size":1834,"mtime":1638841561585,"results":"23","hashOfConfig":"16"},{"size":2172,"mtime":1638766805467,"results":"24","hashOfConfig":"16"},{"size":5521,"mtime":1638841194427,"results":"25","hashOfConfig":"16"},{"size":1889,"mtime":1638840408664,"results":"26","hashOfConfig":"16"},{"size":2642,"mtime":1638841620628,"results":"27","hashOfConfig":"16"},{"size":1446,"mtime":1638838962024,"results":"28","hashOfConfig":"16"},{"size":214,"mtime":1638841500697,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"17gckta",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/danielchoe/Projects/project3/src/index.js",[],["62","63"],"/Users/danielchoe/Projects/project3/src/App.js",[],"/Users/danielchoe/Projects/project3/src/app/store.js",[],"/Users/danielchoe/Projects/project3/src/services/cryptoApi.js",[],"/Users/danielchoe/Projects/project3/src/services/cryptoNewsApi.js",[],"/Users/danielchoe/Projects/project3/src/components/index.js",[],"/Users/danielchoe/Projects/project3/src/components/Exchanges.jsx",[],"/Users/danielchoe/Projects/project3/src/components/Homepage.jsx",[],"/Users/danielchoe/Projects/project3/src/components/Cryptocurrencies.jsx",["64"],"import React, { useState, useEffect } from 'react';\n// import React from 'react';\nimport millify from 'millify';\nimport { Link } from 'react-router-dom';\nimport { Card, Row, Col, Input } from 'antd';\n\nimport { useGetCryptosQuery } from '../services/cryptoApi';\n\nconst Cryptocurrencies = ({ simplified }) => {\n  const count = simplified ? 10 : 100;\n  const { data: cryptosList, isFetching } = useGetCryptosQuery(count);\n  const [cryptos, setCryptos] = useState([]);\n  const [searchTerm, setSearchTerm] =useState('');\n\n  console.log(cryptosList);\n\n  useEffect(() => {\n\n    const filteredData = cryptosList?.data?.coins.filter((coin) => coin.name.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    setCryptos(filteredData);\n\n  }, [cryptosList, searchTerm]);\n  //use effect, accepts a callback function and a dependency array. It is a combination of the componentDidMount and componentDidUpdate.\n  //if anything changes in the dependency array, the callback function will be executed.\n\n  if (isFetching) return 'Loading...';\n\n  return (\n    <>\n    {!simplified && (\n      <div className=\"search-crypto\">\n        <Input placeholder=\"Search Cryptocurrency\" onChange={(e) => setSearchTerm(e.target.value)}/>\n      </div>\n\n    )}\n      <Row gutter={[32, 32]} className=\"crypto-card-container\">\n        {cryptos?.map((currency) => (\n          <Col xs={24} sm={12} lg={6} className=\"crypto-card\" key={currency.id}>\n            <Link to={`/crypto/${currency.id}`}>\n              <Card\n                title={`${currency.rank}. ${currency.name}`}\n                extra={<img className=\"crypto-image\" src={currency.iconUrl} />}\n                hoverable\n                >\n                  <p>Price: {millify(currency.price)}</p>\n                  <p>Market Cap: {millify(currency.marketCap)}</p>\n                  <p>Daily Change: {millify(currency.change)}</p>\n              </Card>\n            </Link>\n          </Col>\n        ))}\n      </Row>\n    </>\n  )\n}\n\nexport default Cryptocurrencies\n\n//the use of parenthesis with the map method, means we will return instantly comapred to the use of curly braces.\n//the question mark ensures that when it is undefined it will not map.\n","/Users/danielchoe/Projects/project3/src/components/CryptoDetails.jsx",["65","66"],"import React, { useState } from 'react';\nimport HTMLReactParser from 'html-react-parser';\nimport { useParams } from 'react-router-dom';\nimport millify from 'millify';\nimport { Col, Row, Typography, Select } from 'antd';\nimport { MoneyCollectOutlined, DollarCircleOutlined, FundOutlined, ExclamationCircleOutlined, StopOutlined, TrophyOutlined, CheckOutlined, NumberOutlined, ThunderboltOutlined } from '@ant-design/icons';\n\nimport { useGetCryptoDetailsQuery, useGetCryptoHistoryQuery } from '../services/cryptoApi';\nimport LineChart from './LineChart';\nimport Loader from './Loader';\n\nconst { Title, Text } = Typography\nconst { Option } = Select;\n\n\nconst CryptoDetails = () => {\n  const { coinId } = useParams(); //takes the ID in the url and place in a variable.\n  const [ timePeriod, setTimePeriod ] = useState('7d');\n  const { data, isFetching } = useGetCryptoDetailsQuery(coinId);\n  const { data: coinHistory } = useGetCryptoHistoryQuery({coinId, timePeriod});\n  const cryptoDetails = data?.data?.coin;\n\n  if (cryptoDetails === undefined) return <Loader />; //required due to asynchronous nature of JS.\n\n\n  const time = ['3h', '24h', '7d', '30d', '1y', '3m', '3y', '5y'];\n\n  const stats = [\n    { title: 'Price to USD', value: `$ ${cryptoDetails.price && millify(cryptoDetails.price)}`, icon: <DollarCircleOutlined /> },\n    { title: 'Rank', value: cryptoDetails?.rank, icon: <NumberOutlined /> },\n    { title: '24h Volume', value: `$ ${cryptoDetails.volume && millify(cryptoDetails.volume)}`, icon: <ThunderboltOutlined /> },\n    { title: 'Market Cap', value: `$ ${cryptoDetails.marketCap && millify(cryptoDetails.marketCap)}`, icon: <DollarCircleOutlined /> },\n    { title: 'All-time-high(daily avg.)', value: `$ ${millify(cryptoDetails.allTimeHigh.price)}`, icon: <TrophyOutlined /> },\n  ];\n\n  const genericStats = [\n    { title: 'Number Of Markets', value: cryptoDetails.numberOfMarkets, icon: <FundOutlined /> },\n    { title: 'Number Of Exchanges', value: cryptoDetails.numberOfExchanges, icon: <MoneyCollectOutlined /> },\n    { title: 'Aprroved Supply', value: cryptoDetails.approvedSupply ? <CheckOutlined /> : <StopOutlined />, icon: <ExclamationCircleOutlined /> },\n    { title: 'Total Supply', value: `$ ${millify(cryptoDetails.totalSupply)}`, icon: <ExclamationCircleOutlined /> },\n    { title: 'Circulating Supply', value: `$ ${millify(cryptoDetails.circulatingSupply)}`, icon: <ExclamationCircleOutlined /> },\n  ];\n\n\n  return (\n    <Col className=\"coin-detail-container\">\n      <Col className=\"coin-heading-container\">\n        <Title level={2} className=\"coin-name\">\n           {cryptoDetails.name} ({cryptoDetails.slug}) Price\n        </Title>\n        <p>\n          {cryptoDetails.name} live price in US dollars.\n          View value statistics, market cap and supply.\n        </p>\n      </Col>\n      <Select\n        defaultValue=\"7d\"\n        className=\"select-timeperiod\"\n        placeholder=\"Select Time Period\"\n        onChange={(value) => setTimePeriod(value)}\n        >\n        {time.map((date) => <Option key={date}>{date}</Option>)}\n      </Select>\n      <LineChart coinHistory={coinHistory} currentPrice={millify(cryptoDetails.price)} coinName={cryptoDetails.name}/>\n      <Col classNmae=\"stats-container\">\n        <Col className=\"coin-value-statistics\">\n          <Col className=\"coin-value-statistics-heading\">\n            <Title level={3} className=\"coin-details-heading\">\n              {cryptoDetails.name} Value Statistics\n            </Title>\n            <p>\n              An overview showing the stats of {cryptoDetails.name}\n            </p>\n            {stats.map(({icon, title, value}) => (\n              <Col className=\"coin-stats\">\n                <Col className=\"coin-stats-name\">\n                  <Text>{icon}</Text>\n                  <Text>{title}</Text>\n                </Col>\n                <Text className=\"stats\">{value}</Text>\n              </Col>\n            ))}\n          </Col>\n        </Col>\n        <Col className=\"other-stats-info\">\n          <Col className=\"coin-value-statistics-heading\">\n            <Title level={3} className=\"coin-details-heading\">\n              Other Statistics\n            </Title>\n            <p>\n              An overview showing the stats of all cryptocurrencies\n            </p>\n            {genericStats.map(({icon, title, value}) => (\n              <Col className=\"coin-stats\">\n                <Col className=\"coin-stats-name\">\n                  <Text>{icon}</Text>\n                  <Text>{title}</Text>\n                </Col>\n                <Text className=\"stats\">{value}</Text>\n              </Col>\n            ))}\n          </Col>\n        </Col>\n      </Col>\n      <Col className=\"coin-desc-link\">\n        <Row className=\"coin-desc\">\n          <Title level={3} className=\"coin-details-heading\">\n            What is {cryptoDetails.name}?\n            {HTMLReactParser(cryptoDetails.description)}\n          </Title>\n        </Row>\n        <Col className=\"coin-links\">\n          <Title level={3} className=\"coin-details-heading\">\n            {cryptoDetails.name} Links\n            {cryptoDetails.links.map((link) => (\n              <Row className=\"coin-link\" key={link.name}>\n                <Title level={5} className=\"link-name\">\n                  {link.type}\n                </Title>\n                <a href={link.url} target=\"_blank\" rel=\"norefer\">\n                  {link.name}\n                </a>\n              </Row>\n            ))}\n          </Title>\n        </Col>\n      </Col>\n    </Col>\n  )\n}\n\nexport default CryptoDetails\n","/Users/danielchoe/Projects/project3/src/components/Navbar.jsx",[],"/Users/danielchoe/Projects/project3/src/components/News.jsx",["67"],"import React, { useState } from 'react';\nimport { Select, Typography, Row, Col, Avatar, Card } from 'antd';\nimport moment from 'moment';\n\nimport { useGetCryptoNewsQuery } from '../services/cryptoNewsApi';\nimport { useGetCryptosQuery } from '../services/cryptoApi';\nimport Loader from './Loader';\n\nconst { Text, Title } = Typography;\nconst { Option } = Select;\n\nconst demoImage = 'http://coinrevolution.com/wp-content/uploads/2020/06/cryptonews.jpg';\n//simplified will be true if on the home page.\nconst News = ({ simplified }) => {\n  const [newsCategory, setNewsCategory] = useState('Cryptocurrency');\n  const { data: cryptoNews } = useGetCryptoNewsQuery({ newsCategory: newsCategory, count: simplified ? 6 : 12});\n  const { data } = useGetCryptosQuery(100);\n\n  // console.log(cryptoNews);\n\n  if(!cryptoNews ?.value) return <Loader />;\n\n  return (\n    <Row gutter={[24, 24]}>\n      {!simplified && (\n        <Col span={24}>\n          <Select\n            showSearch\n            className='select-news'\n            placeholder=\"Select a Crypto\"\n            optionFilterProp=\"children\"\n            onChange={(value) => setNewsCategory(value)}\n            filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          >\n            <Option value=\"Cryptocurrency\">Cryptocurrency</Option>\n            {data?.data?.coins.map((coins) => <Option value={coins.name}>{coins.name}</Option>)}\n          </Select>\n        </Col>\n\n      )}\n      {cryptoNews.value.map((news, i) => (\n        <Col xs={24} sm={12} lg={8} key={i}>\n          <Card hoverable className=\"news-card\">\n            <a href={news.url} target=\"_blank\" rel=\"noreferrer\">\n              <div className=\"news-image-container\">\n                <Title className=\"news-title\" level={4}>{news.name}</Title>\n                <img style={ {maxWidth: '200px', maxHeight: '100px'} } src={news?.image?.thumbnail?.contentUrl || demoImage} alt=\"news\"/>\n              </div>\n              <p>\n                {news.description > 100\n                  ? `${news.description.substring(0, 100)}...`\n                  : news.description\n                }\n              </p>\n              <div className=\"provider-container\">\n                <div>\n                  <Avatar src={news.provider[0]?.image?.thumbnail?.contentUrl || demoImage} alt=\"news\"/>\n                  <Text className=\"provider-name\">{news.provider[0]?.name}</Text>\n                </div>\n                  <Text>{moment(news.datePublished).startOf('ss').fromNow()}</Text>\n              </div>\n            </a>\n          </Card>\n        </Col>\n      ))}\n    </Row>\n  )\n}\n\nexport default News\n","/Users/danielchoe/Projects/project3/src/components/LineChart.jsx",[],"/Users/danielchoe/Projects/project3/src/components/Loader.jsx",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":43,"column":24,"nodeType":"74","endLine":43,"endColumn":79},{"ruleId":"75","severity":1,"message":"76","line":19,"column":17,"nodeType":"77","messageId":"78","endLine":19,"endColumn":27},{"ruleId":"79","severity":1,"message":"80","line":120,"column":17,"nodeType":"74","endLine":120,"endColumn":66},{"ruleId":"81","severity":1,"message":"82","line":21,"column":7,"nodeType":"83","messageId":"84","endLine":21,"endColumn":25,"fix":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'isFetching' is assigned a value but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-whitespace-before-property","Unexpected whitespace before property value.","MemberExpression","unexpectedWhitespace",{"range":"88","text":"89"},"no-global-assign","no-unsafe-negation",[807,810],"?."]