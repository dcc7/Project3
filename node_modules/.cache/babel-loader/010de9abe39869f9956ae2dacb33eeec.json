{"ast":null,"code":"var _jsxFileName = \"/Users/danielchoe/Projects/project3/crypto-app/src/components/CryptoDetails.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport HTMLReactParser from 'html-react-parser';\nimport { useParams } from 'react-router-dom';\nimport millify from 'millify';\nimport { Col, Row, Typography, Select } from 'antd';\nimport { MoneyCollectOutlined, DollarCircleOutlined, FundOutlined, ExclamationCircleOutlined, StopOutlined, TrophyOutlined, CheckOutlined, NumberOutlined, ThunderboltOutlined } from '@ant-design/icons';\nimport { useGetCryptoDetailsQuery } from '../services/cryptoApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Text\n} = Typography;\nconst {\n  Option\n} = Select;\n\nconst CryptoDetails = () => {\n  _s();\n\n  var _data$data;\n\n  const {\n    coinId\n  } = useParams(); //takes the ID in the url and place in a variable.\n\n  const [timePeriod, setTimePeriod] = useState('7d');\n  const {\n    data,\n    isFetching\n  } = useGetCryptoDetailsQuery(coinId);\n  const cryptoDetails = data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.coin;\n  console.log(cryptoDetails);\n  console.log(cryptoDetails === null || cryptoDetails === void 0 ? void 0 : cryptoDetails.price); // console.log(data);\n  // const { data: coinHistory } = useGetCryptoHistoryQuery({ coinId, timeperiod });\n\n  const time = ['3h', '24h', '7d', '30d', '1y', '3m', '3y', '5y'];\n  const stats = [{\n    title: 'Price to USD',\n    value: `$ ${cryptoDetails.price && millify(cryptoDetails.price)}`,\n    icon: /*#__PURE__*/_jsxDEV(DollarCircleOutlined, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 103\n    }, this)\n  } // { title: 'Rank', value: cryptoDetails?.rank, icon: <NumberOutlined /> },\n  // { title: '24h Volume', value: `$ ${cryptoDetails?.volume && millify(cryptoDetails.volume)}`, icon: <ThunderboltOutlined /> },\n  // { title: 'Market Cap', value: `$ ${cryptoDetails.marketCap && millify(cryptoDetails.marketCap)}`, icon: <DollarCircleOutlined /> },\n  // { title: 'All-time-high(daily avg.)', value: `$ ${millify(cryptoDetails.allTimeHigh.price)}`, icon: <TrophyOutlined /> },\n  ]; // const genericStats = [\n  //   { title: 'Number Of Markets', value: cryptoDetails.numberOfMarkets, icon: <FundOutlined /> },\n  //   { title: 'Number Of Exchanges', value: cryptoDetails.numberOfExchanges, icon: <MoneyCollectOutlined /> },\n  //   { title: 'Aprroved Supply', value: cryptoDetails.approvedSupply ? <CheckOutlined /> : <StopOutlined />, icon: <ExclamationCircleOutlined /> },\n  //   { title: 'Total Supply', value: `$ ${millify(cryptoDetails.totalSupply)}`, icon: <ExclamationCircleOutlined /> },\n  //   { title: 'Circulating Supply', value: `$ ${millify(cryptoDetails.circulatingSupply)}`, icon: <ExclamationCircleOutlined /> },\n  // ];\n  // {cryptoDetails.name} ({cryptoDetails.slug})Price\n  // {cryptoDetails.name}\n\n  return /*#__PURE__*/_jsxDEV(Col, {\n    className: \"coin-detail-container\",\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      className: \"coin-heading-container\",\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        level: 2,\n        className: \"coin-name\",\n        children: \"Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"live price in US dollars. View value statistics, market cap and supply.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      defaultValue: \"7d\",\n      className: \"select-timeperiod\",\n      placeholder: \"Select Time Period\",\n      onChange: value => setTimePeriod(value),\n      children: time.map(date => /*#__PURE__*/_jsxDEV(Option, {\n        children: date\n      }, date, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CryptoDetails, \"ovYxASWcEm+5AyUi6oXFTIYFRbU=\", false, function () {\n  return [useParams, useGetCryptoDetailsQuery];\n});\n\n_c = CryptoDetails;\nexport default CryptoDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoDetails\");","map":{"version":3,"sources":["/Users/danielchoe/Projects/project3/crypto-app/src/components/CryptoDetails.jsx"],"names":["React","useState","HTMLReactParser","useParams","millify","Col","Row","Typography","Select","MoneyCollectOutlined","DollarCircleOutlined","FundOutlined","ExclamationCircleOutlined","StopOutlined","TrophyOutlined","CheckOutlined","NumberOutlined","ThunderboltOutlined","useGetCryptoDetailsQuery","Title","Text","Option","CryptoDetails","coinId","timePeriod","setTimePeriod","data","isFetching","cryptoDetails","coin","console","log","price","time","stats","title","value","icon","map","date"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,UAAnB,EAA+BC,MAA/B,QAA6C,MAA7C;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,EAAqDC,YAArD,EAAmEC,yBAAnE,EAA8FC,YAA9F,EAA4GC,cAA5G,EAA4HC,aAA5H,EAA2IC,cAA3I,EAA2JC,mBAA3J,QAAsL,mBAAtL;AAEA,SAASC,wBAAT,QAAyC,uBAAzC;;AAEA,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAkBb,UAAxB;AACA,MAAM;AAAEc,EAAAA;AAAF,IAAab,MAAnB;;AAGA,MAAMc,aAAa,GAAG,MAAM;AAAA;;AAAA;;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAAapB,SAAS,EAA5B,CAD0B,CACM;;AAChC,QAAM,CAAEqB,UAAF,EAAcC,aAAd,IAAgCxB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM;AAAEyB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAuBT,wBAAwB,CAACK,MAAD,CAArD;AACA,QAAMK,aAAa,GAAGF,IAAH,aAAGA,IAAH,qCAAGA,IAAI,CAAEA,IAAT,+CAAG,WAAYG,IAAlC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ,aAAYA,aAAZ,uBAAYA,aAAa,CAAEI,KAA3B,EAP0B,CAQ1B;AAEA;;AAGA,QAAMC,IAAI,GAAG,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,KAApB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuC,IAAvC,EAA6C,IAA7C,CAAb;AAEA,QAAMC,KAAK,GAAG,CACZ;AAAEC,IAAAA,KAAK,EAAE,cAAT;AAAyBC,IAAAA,KAAK,EAAG,KAAIR,aAAa,CAACI,KAAd,IAAuB5B,OAAO,CAACwB,aAAa,CAACI,KAAf,CAAsB,EAAzF;AAA4FK,IAAAA,IAAI,eAAE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAlG,GADY,CAEZ;AACA;AACA;AACA;AALY,GAAd,CAf0B,CAuB1B;AACA;AACA;AACA;AACA;AACA;AACA;AAED;AACD;;AAEE,sBACE,QAAC,GAAD;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE,CAAd;AAAiB,QAAA,SAAS,EAAC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE,QAAC,MAAD;AACE,MAAA,YAAY,EAAC,IADf;AAEE,MAAA,SAAS,EAAC,mBAFZ;AAGE,MAAA,WAAW,EAAC,oBAHd;AAIE,MAAA,QAAQ,EAAGD,KAAD,IAAWX,aAAa,CAACW,KAAD,CAJpC;AAAA,gBAMGH,IAAI,CAACK,GAAL,CAAUC,IAAD,iBAAU,QAAC,MAAD;AAAA,kBAAoBA;AAApB,SAAaA,IAAb;AAAA;AAAA;AAAA;AAAA,cAAnB;AANH;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAvDD;;GAAMjB,a;UACenB,S,EAEUe,wB;;;KAHzBI,a;AAyDN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react';\nimport HTMLReactParser from 'html-react-parser';\nimport { useParams } from 'react-router-dom';\nimport millify from 'millify';\nimport { Col, Row, Typography, Select } from 'antd';\nimport { MoneyCollectOutlined, DollarCircleOutlined, FundOutlined, ExclamationCircleOutlined, StopOutlined, TrophyOutlined, CheckOutlined, NumberOutlined, ThunderboltOutlined } from '@ant-design/icons';\n\nimport { useGetCryptoDetailsQuery } from '../services/cryptoApi';\n\nconst { Title, Text } = Typography\nconst { Option } = Select;\n\n\nconst CryptoDetails = () => {\n  const { coinId } = useParams(); //takes the ID in the url and place in a variable.\n  const [ timePeriod, setTimePeriod ] = useState('7d');\n  const { data, isFetching } = useGetCryptoDetailsQuery(coinId);\n  const cryptoDetails = data?.data?.coin;\n\n  console.log(cryptoDetails);\n  console.log(cryptoDetails?.price);\n  // console.log(data);\n\n  // const { data: coinHistory } = useGetCryptoHistoryQuery({ coinId, timeperiod });\n\n\n  const time = ['3h', '24h', '7d', '30d', '1y', '3m', '3y', '5y'];\n\n  const stats = [\n    { title: 'Price to USD', value: `$ ${cryptoDetails.price && millify(cryptoDetails.price)}`, icon: <DollarCircleOutlined /> },\n    // { title: 'Rank', value: cryptoDetails?.rank, icon: <NumberOutlined /> },\n    // { title: '24h Volume', value: `$ ${cryptoDetails?.volume && millify(cryptoDetails.volume)}`, icon: <ThunderboltOutlined /> },\n    // { title: 'Market Cap', value: `$ ${cryptoDetails.marketCap && millify(cryptoDetails.marketCap)}`, icon: <DollarCircleOutlined /> },\n    // { title: 'All-time-high(daily avg.)', value: `$ ${millify(cryptoDetails.allTimeHigh.price)}`, icon: <TrophyOutlined /> },\n  ];\n\n  // const genericStats = [\n  //   { title: 'Number Of Markets', value: cryptoDetails.numberOfMarkets, icon: <FundOutlined /> },\n  //   { title: 'Number Of Exchanges', value: cryptoDetails.numberOfExchanges, icon: <MoneyCollectOutlined /> },\n  //   { title: 'Aprroved Supply', value: cryptoDetails.approvedSupply ? <CheckOutlined /> : <StopOutlined />, icon: <ExclamationCircleOutlined /> },\n  //   { title: 'Total Supply', value: `$ ${millify(cryptoDetails.totalSupply)}`, icon: <ExclamationCircleOutlined /> },\n  //   { title: 'Circulating Supply', value: `$ ${millify(cryptoDetails.circulatingSupply)}`, icon: <ExclamationCircleOutlined /> },\n  // ];\n\n // {cryptoDetails.name} ({cryptoDetails.slug})Price\n// {cryptoDetails.name}\n\n  return (\n    <Col className=\"coin-detail-container\">\n      <Col className=\"coin-heading-container\">\n        <Title level={2} className=\"coin-name\">\n           Price\n        </Title>\n        <p>\n          live price in US dollars.\n          View value statistics, market cap and supply.\n        </p>\n      </Col>\n      <Select\n        defaultValue=\"7d\"\n        className=\"select-timeperiod\"\n        placeholder=\"Select Time Period\"\n        onChange={(value) => setTimePeriod(value)}\n        >\n        {time.map((date) => <Option key={date}>{date}</Option>)}\n      </Select>\n    </Col>\n  )\n}\n\nexport default CryptoDetails\n"]},"metadata":{},"sourceType":"module"}