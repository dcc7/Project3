{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst cryptoApiHeaders = {\n  'x-rapidapi-host': 'coinranking1.p.rapidapi.com',\n  // 'x-rapidapi-key': `${process.env.REACT_APP_API_KEY}`\n  'x-rapidapi-key': `coinranking60bdcf07c18b74f861a2d1a50756e2dfb6efe944a9f5b487`\n};\nconst baseUrl = 'https://api.coinranking.com/v2';\n\nconst createRequest = url => ({\n  url,\n  headers: cryptoApiHeaders\n});\n\nexport const cryptoApi = createApi({\n  reducerPath: 'cryptoApi',\n  //purpose of the reducer.\n  baseQuery: fetchBaseQuery({\n    baseUrl\n  }),\n  endpoints: builder => ({\n    //end points are defined here.\n    getCryptos: builder.query({\n      query: count => createRequest(`/coins?limit=${count}`)\n    }),\n    getCryptoDetails: builder.query({\n      query: coinId => createRequest(`/coin/${coinId}`)\n    }),\n    getCryptoHistory: builder.query({\n      query: ({\n        coinId,\n        timePeriod\n      }) => createRequest(`/coin/${coinId}/history/${timePeriod}`)\n    }),\n    getExchanges: builder.query({\n      query: () => createRequest('/exchanges')\n    })\n  })\n}); //end points must also be conencted to the store as it is passed down as a prop.\n//redux toolkit creates a hook to get all the data from your query instantly (as shown below via the variables).\n\nexport const {\n  useGetCryptosQuery,\n  useGetCryptoDetailsQuery,\n  useGetCryptoHistoryQuery,\n  useGetExchangesQuery\n} = cryptoApi;","map":{"version":3,"sources":["/Users/danielchoe/Projects/project3/src/services/cryptoApi.js"],"names":["createApi","fetchBaseQuery","cryptoApiHeaders","baseUrl","createRequest","url","headers","cryptoApi","reducerPath","baseQuery","endpoints","builder","getCryptos","query","count","getCryptoDetails","coinId","getCryptoHistory","timePeriod","getExchanges","useGetCryptosQuery","useGetCryptoDetailsQuery","useGetCryptoHistoryQuery","useGetExchangesQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,MAAMC,gBAAgB,GAAG;AACvB,qBAAmB,6BADI;AAEvB;AACA,oBAAmB;AAHI,CAAzB;AAKA,MAAMC,OAAO,GAAG,gCAAhB;;AAEA,MAAMC,aAAa,GAAIC,GAAD,KAAU;AAAEA,EAAAA,GAAF;AAAOC,EAAAA,OAAO,EAAEJ;AAAhB,CAAV,CAAtB;;AAEA,OAAO,MAAMK,SAAS,GAAGP,SAAS,CAAC;AACjCQ,EAAAA,WAAW,EAAE,WADoB;AACP;AAC1BC,EAAAA,SAAS,EAAER,cAAc,CAAC;AAAEE,IAAAA;AAAF,GAAD,CAFQ;AAGjCO,EAAAA,SAAS,EAAGC,OAAD,KAAc;AAAE;AACzBC,IAAAA,UAAU,EAAED,OAAO,CAACE,KAAR,CAAc;AACxBA,MAAAA,KAAK,EAAGC,KAAD,IAAWV,aAAa,CAAE,gBAAeU,KAAM,EAAvB;AADP,KAAd,CADW;AAIvBC,IAAAA,gBAAgB,EAAEJ,OAAO,CAACE,KAAR,CAAc;AAC9BA,MAAAA,KAAK,EAAGG,MAAD,IAAYZ,aAAa,CAAE,SAAQY,MAAO,EAAjB;AADF,KAAd,CAJK;AAOvBC,IAAAA,gBAAgB,EAAEN,OAAO,CAACE,KAAR,CAAc;AAC9BA,MAAAA,KAAK,EAAE,CAAC;AAAEG,QAAAA,MAAF;AAAUE,QAAAA;AAAV,OAAD,KAA4Bd,aAAa,CAAE,SAAQY,MAAO,YAAWE,UAAW,EAAvC;AADlB,KAAd,CAPK;AAUvBC,IAAAA,YAAY,EAAER,OAAO,CAACE,KAAR,CAAc;AAC1BA,MAAAA,KAAK,EAAE,MAAMT,aAAa,CAAC,YAAD;AADA,KAAd;AAVS,GAAd;AAHsB,CAAD,CAA3B,C,CAkBP;AAEA;;AACA,OAAO,MAAM;AAAEgB,EAAAA,kBAAF;AAAsBC,EAAAA,wBAAtB;AAAgDC,EAAAA,wBAAhD;AAA0EC,EAAAA;AAA1E,IAAmGhB,SAAzG","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst cryptoApiHeaders = {\n  'x-rapidapi-host': 'coinranking1.p.rapidapi.com',\n  // 'x-rapidapi-key': `${process.env.REACT_APP_API_KEY}`\n  'x-rapidapi-key': `coinranking60bdcf07c18b74f861a2d1a50756e2dfb6efe944a9f5b487`\n}\nconst baseUrl = 'https://api.coinranking.com/v2';\n\nconst createRequest = (url) => ({ url, headers: cryptoApiHeaders});\n\nexport const cryptoApi = createApi({\n  reducerPath: 'cryptoApi', //purpose of the reducer.\n  baseQuery: fetchBaseQuery({ baseUrl }),\n  endpoints: (builder) => ({ //end points are defined here.\n    getCryptos: builder.query({\n      query: (count) => createRequest(`/coins?limit=${count}`)\n    }),\n    getCryptoDetails: builder.query({\n      query: (coinId) => createRequest(`/coin/${coinId}`),\n    }),\n    getCryptoHistory: builder.query({\n      query: ({ coinId, timePeriod }) => createRequest(`/coin/${coinId}/history/${timePeriod}`),\n    }),\n    getExchanges: builder.query({\n      query: () => createRequest('/exchanges'),\n    })\n  })\n});\n//end points must also be conencted to the store as it is passed down as a prop.\n\n//redux toolkit creates a hook to get all the data from your query instantly (as shown below via the variables).\nexport const { useGetCryptosQuery, useGetCryptoDetailsQuery, useGetCryptoHistoryQuery, useGetExchangesQuery } = cryptoApi;\n"]},"metadata":{},"sourceType":"module"}