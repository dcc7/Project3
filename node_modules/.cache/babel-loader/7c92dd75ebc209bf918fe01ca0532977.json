{"ast":null,"code":"import{createApi,fetchBaseQuery}from'@reduxjs/toolkit/query/react';var cryptoApiHeaders={'x-rapidapi-host':'coinranking1.p.rapidapi.com','x-rapidapi-key':\"\".concat(process.env.REACT_APP_API_KEY)};var baseUrl='https://coinranking1.p.rapidapi.com';var createRequest=function createRequest(url){return{url:url,headers:cryptoApiHeaders};};export var cryptoApi=createApi({reducerPath:'cryptoApi',//purpose of the reducer.\nbaseQuery:fetchBaseQuery({baseUrl:baseUrl}),endpoints:function endpoints(builder){return{//end points are defined here.\ngetCryptos:builder.query({query:function query(count){return createRequest(\"/coins?limit=\".concat(count));}}),getCryptoDetails:builder.query({query:function query(coinId){return createRequest(\"/coin/\".concat(coinId));}}),getCryptoHistory:builder.query({query:function query(_ref){var coinId=_ref.coinId,timePeriod=_ref.timePeriod;return createRequest(\"/coin/\".concat(coinId,\"/history/\").concat(timePeriod));}}),getExchanges:builder.query({query:function query(){return createRequest('/exchanges');}})};}});//end points must also be conencted to the store as it is passed down as a prop.\n//redux toolkit creates a hook to get all the data from your query instantly (as shown below via the variables).\nvar useGetCryptosQuery=cryptoApi.useGetCryptosQuery,useGetCryptoDetailsQuery=cryptoApi.useGetCryptoDetailsQuery,useGetCryptoHistoryQuery=cryptoApi.useGetCryptoHistoryQuery,useGetExchangesQuery=cryptoApi.useGetExchangesQuery;export{useGetCryptosQuery,useGetCryptoDetailsQuery,useGetCryptoHistoryQuery,useGetExchangesQuery};","map":{"version":3,"sources":["/Users/danielchoe/Projects/project3/src/services/cryptoApi.js"],"names":["createApi","fetchBaseQuery","cryptoApiHeaders","process","env","REACT_APP_API_KEY","baseUrl","createRequest","url","headers","cryptoApi","reducerPath","baseQuery","endpoints","builder","getCryptos","query","count","getCryptoDetails","coinId","getCryptoHistory","timePeriod","getExchanges","useGetCryptosQuery","useGetCryptoDetailsQuery","useGetCryptoHistoryQuery","useGetExchangesQuery"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,cAApB,KAA0C,8BAA1C,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,CACvB,kBAAmB,6BADI,CAEvB,2BAAqBC,OAAO,CAACC,GAAR,CAAYC,iBAAjC,CAFuB,CAAzB,CAIA,GAAMC,CAAAA,OAAO,CAAG,qCAAhB,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,GAAD,QAAU,CAAEA,GAAG,CAAHA,GAAF,CAAOC,OAAO,CAAEP,gBAAhB,CAAV,EAAtB,CAEA,MAAO,IAAMQ,CAAAA,SAAS,CAAGV,SAAS,CAAC,CACjCW,WAAW,CAAE,WADoB,CACP;AAC1BC,SAAS,CAAEX,cAAc,CAAC,CAAEK,OAAO,CAAPA,OAAF,CAAD,CAFQ,CAGjCO,SAAS,CAAE,mBAACC,OAAD,QAAc,CAAE;AACzBC,UAAU,CAAED,OAAO,CAACE,KAAR,CAAc,CACxBA,KAAK,CAAE,eAACC,KAAD,QAAWV,CAAAA,aAAa,wBAAiBU,KAAjB,EAAxB,EADiB,CAAd,CADW,CAIvBC,gBAAgB,CAAEJ,OAAO,CAACE,KAAR,CAAc,CAC9BA,KAAK,CAAE,eAACG,MAAD,QAAYZ,CAAAA,aAAa,iBAAUY,MAAV,EAAzB,EADuB,CAAd,CAJK,CAOvBC,gBAAgB,CAAEN,OAAO,CAACE,KAAR,CAAc,CAC9BA,KAAK,CAAE,wBAAGG,CAAAA,MAAH,MAAGA,MAAH,CAAWE,UAAX,MAAWA,UAAX,OAA4Bd,CAAAA,aAAa,iBAAUY,MAAV,qBAA4BE,UAA5B,EAAzC,EADuB,CAAd,CAPK,CAUvBC,YAAY,CAAER,OAAO,CAACE,KAAR,CAAc,CAC1BA,KAAK,CAAE,uBAAMT,CAAAA,aAAa,CAAC,YAAD,CAAnB,EADmB,CAAd,CAVS,CAAd,EAHsB,CAAD,CAA3B,CAkBP;AAEA;GACegB,CAAAA,kB,CAAiGb,S,CAAjGa,kB,CAAoBC,wB,CAA6Ed,S,CAA7Ec,wB,CAA0BC,wB,CAAmDf,S,CAAnDe,wB,CAA0BC,oB,CAAyBhB,S,CAAzBgB,oB","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nconst cryptoApiHeaders = {\n  'x-rapidapi-host': 'coinranking1.p.rapidapi.com',\n  'x-rapidapi-key': `${process.env.REACT_APP_API_KEY}`\n}\nconst baseUrl = 'https://coinranking1.p.rapidapi.com';\n\nconst createRequest = (url) => ({ url, headers: cryptoApiHeaders});\n\nexport const cryptoApi = createApi({\n  reducerPath: 'cryptoApi', //purpose of the reducer.\n  baseQuery: fetchBaseQuery({ baseUrl }),\n  endpoints: (builder) => ({ //end points are defined here.\n    getCryptos: builder.query({\n      query: (count) => createRequest(`/coins?limit=${count}`)\n    }),\n    getCryptoDetails: builder.query({\n      query: (coinId) => createRequest(`/coin/${coinId}`),\n    }),\n    getCryptoHistory: builder.query({\n      query: ({ coinId, timePeriod }) => createRequest(`/coin/${coinId}/history/${timePeriod}`),\n    }),\n    getExchanges: builder.query({\n      query: () => createRequest('/exchanges'),\n    })\n  })\n});\n//end points must also be conencted to the store as it is passed down as a prop.\n\n//redux toolkit creates a hook to get all the data from your query instantly (as shown below via the variables).\nexport const { useGetCryptosQuery, useGetCryptoDetailsQuery, useGetCryptoHistoryQuery, useGetExchangesQuery } = cryptoApi;\n"]},"metadata":{},"sourceType":"module"}