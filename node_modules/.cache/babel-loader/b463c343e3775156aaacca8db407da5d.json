{"ast":null,"code":"var _jsxFileName = \"/Users/danielchoe/Projects/project3/src/components/Cryptocurrencies.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport millify from 'millify';\nimport { Link } from 'react-router-dom';\nimport { Card, Row, Col, Input } from 'antd';\nimport { useGetCryptosQuery } from '../services/cryptoApi';\nimport Loader from './Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Cryptocurrencies = ({\n  simplified\n}) => {\n  _s();\n\n  const count = simplified ? 10 : 100;\n  const {\n    data: cryptosList,\n    isFetching\n  } = useGetCryptosQuery(count);\n  const [cryptos, setCryptos] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  useEffect(() => {\n    var _cryptosList$data;\n\n    const filteredData = cryptosList === null || cryptosList === void 0 ? void 0 : (_cryptosList$data = cryptosList.data) === null || _cryptosList$data === void 0 ? void 0 : _cryptosList$data.coins.filter(coin => coin.name.toLowerCase().includes(searchTerm.toLowerCase()));\n    setCryptos(filteredData);\n  }, [cryptosList, searchTerm]); //use effect, accepts a callback function and a dependency array. It is a combination of the componentDidMount and componentDidUpdate.\n  //if anything changes in the dependency array, the callback function will be executed.\n\n  if (isFetching) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 26\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!simplified && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-crypto\",\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Search Cryptocurrency\",\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      gutter: [15, 0],\n      className: \"crypto-card-container\",\n      children: cryptos === null || cryptos === void 0 ? void 0 : cryptos.map(currency => /*#__PURE__*/_jsxDEV(Col, {\n        xs: 24,\n        sm: 12,\n        lg: 6,\n        className: \"crypto-card\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/crypto/${currency.uuid}`,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            title: `${currency.rank}. ${currency.name}`,\n            extra: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"crypto-image\",\n              src: currency.iconUrl,\n              alt: \"crypto-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 24\n            }, this),\n            hoverable: true,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Price: $\", millify(currency.price)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Market Cap: $\", millify(currency.marketCap)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Daily Change: \", millify(currency.change), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)\n      }, currency.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Cryptocurrencies, \"tOnBd9VKF5REgcQIR1j/Bay78MY=\", false, function () {\n  return [useGetCryptosQuery];\n});\n\n_c = Cryptocurrencies;\nexport default Cryptocurrencies; //the use of parenthesis with the map method, means we will return instantly comapred to the use of curly braces.\n//the question mark ensures that when it is undefined it will not map.\n\nvar _c;\n\n$RefreshReg$(_c, \"Cryptocurrencies\");","map":{"version":3,"sources":["/Users/danielchoe/Projects/project3/src/components/Cryptocurrencies.jsx"],"names":["React","useState","useEffect","millify","Link","Card","Row","Col","Input","useGetCryptosQuery","Loader","Cryptocurrencies","simplified","count","data","cryptosList","isFetching","cryptos","setCryptos","searchTerm","setSearchTerm","filteredData","coins","filter","coin","name","toLowerCase","includes","e","target","value","map","currency","uuid","rank","iconUrl","price","marketCap","change","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport millify from 'millify';\nimport { Link } from 'react-router-dom';\nimport { Card, Row, Col, Input } from 'antd';\n\nimport { useGetCryptosQuery } from '../services/cryptoApi';\nimport Loader from './Loader';\n\nconst Cryptocurrencies = ({ simplified }) => {\n  const count = simplified ? 10 : 100;\n  const { data: cryptosList, isFetching } = useGetCryptosQuery(count);\n  const [cryptos, setCryptos] = useState([]);\n  const [searchTerm, setSearchTerm] =useState('');\n\n\n  useEffect(() => {\n\n    const filteredData = cryptosList?.data?.coins.filter((coin) => coin.name.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    setCryptos(filteredData);\n\n  }, [cryptosList, searchTerm]);\n  //use effect, accepts a callback function and a dependency array. It is a combination of the componentDidMount and componentDidUpdate.\n  //if anything changes in the dependency array, the callback function will be executed.\n\n  if (isFetching) return <Loader />;\n\n  return (\n    <>\n    {!simplified && (\n      <div className=\"search-crypto\">\n        <Input placeholder=\"Search Cryptocurrency\" onChange={(e) => setSearchTerm(e.target.value)}/>\n      </div>\n\n    )}\n      <Row gutter={[15, 0]} className=\"crypto-card-container\">\n        {cryptos?.map((currency) => (\n          <Col xs={24} sm={12} lg={6} className=\"crypto-card\" key={currency.id}>\n            <Link to={`/crypto/${currency.uuid}`}>\n              <Card\n                title={`${currency.rank}. ${currency.name}`}\n                extra={<img className=\"crypto-image\" src={currency.iconUrl} alt=\"crypto-image\"/>}\n                hoverable\n                >\n                  <p>Price: ${millify(currency.price)}</p>\n                  <p>Market Cap: ${millify(currency.marketCap)}</p>\n                  <p>Daily Change: {millify(currency.change)}%</p>\n              </Card>\n            </Link>\n          </Col>\n        ))}\n      </Row>\n    </>\n  )\n}\n\nexport default Cryptocurrencies\n\n//the use of parenthesis with the map method, means we will return instantly comapred to the use of curly braces.\n//the question mark ensures that when it is undefined it will not map.\n"]},"metadata":{},"sourceType":"module"}